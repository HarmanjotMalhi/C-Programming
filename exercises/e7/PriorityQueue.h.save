
#include <iostream>
#include <string>
#include <array>
template <typename T, int capacity>

class pqueue {

struct item {
T content;
long priority;
};

private:

struct item pq[capacity];
int first;
int last;

public:

pqueue()  {
first = 0;
last = 0;
}

void enqueue(const T in,long p){

std::cout<<"hello world"<<std::endl;
last++;
item insert;
insert.content = in;
insert.priority = p;
std::cout<<"hello world"<<std::endl;
int i = 0;
if(first != 0){
while(pq[i].priority <= p){
i++;
}
pq[i] = insert;
}
else{
pq[i] = insert;
}
}

void dequeue(){

last--;
for(int i = 0; i < sizeof(pq)-1; i++){
pq[i] = pq[i+1];
}
}

bool isEmpty(){

if(pq.empty()) return true;
else return false;
}

T peek(){

return pq[first].content;
}

int count(){
return last;
}
};
